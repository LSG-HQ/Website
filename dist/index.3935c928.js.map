{"mappings":"AAAA,MAAM,gBAAgB,SAAS,cAAc,CAAC;AAC9C,MAAM,QAAQ,SAAS,cAAc,CAAC;AACtC,MAAM,SAAS,SAAS,aAAa,CAAC;AACtC,MAAM,YAAY;IAChB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;CACD;AAED,MAAM,aAAa;IAAC;IAAe;CAAgB;AACnD,IAAI,eAAe;AACnB,IAAI,mBAAmB;AACvB,IAAI,oBAAoB;AAExB,IAAI;AAEJ,eAAe,YAAY,SAAS;IAClC,MAAM,WAAW,SAAS,CAAC,UAAU;IACrC,MAAM,oBAAoB,UAAU,CAAC,YAAY,IAAI,IAAI,EAAE;IAE3D,MAAM,gBACJ,SAAS,SAAS,CAAC,GAAG,mBAAmB,KACxC,CAAA,eAAe,mBAAmB,EAAC;IACtC,cAAc,SAAS,GAAG,CAAC,KAAK,EAAE,cAAc,MAAM,CAAC;IAEvD,MAAM,oBAAoB,kBAAkB,SAAS,CAAC,GAAG;IACzD,OAAO,WAAW,GAAG;IAErB,mBAAmB,KAAK,GAAG,CAAC,mBAAmB,GAAG,SAAS,MAAM;IACjE,oBAAoB,KAAK,GAAG,CAAC,oBAAoB,GAAG,kBAAkB,MAAM;IAE5E,QAAQ,GAAG,CAAC,kBAAkB,SAAS,MAAM;IAC7C,QAAQ,GAAG,CAAC,mBAAmB,kBAAkB,MAAM;IAEvD;;;;GAIC,GACD,IACE,oBAAoB,SAAS,MAAM,IACnC,qBAAqB,kBAAkB,MAAM,EAC7C;QACA,cAAc;QACd,mBAAmB;QACnB,oBAAoB;QAEpB,MAAM,MAAM;QACZ,WAAW,YAAY;YACrB,IAAI,gBAAgB,YAAY;YAChC,IAAI,iBAAiB,UAAU,MAAM,EACnC,gBAAgB;YAElB,YAAY;QACd,GAAG;IACL;AACF;AAEA,SAAS;IACP,WAAW,YAAY;QACrB,YAAY;IACd,GAAG;AACL;AAEA;AAEA,SAAS,MAAM,EAAE;IACf,QAAQ,GAAG,CAAC,kBAAkB;IAC9B,OAAO,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;AACtD","sources":["assets/index.js"],"sourcesContent":["const wordContainer = document.getElementById(\"wordContainer\");\nconst caret = document.getElementById(\"caret\");\nconst header = document.querySelector(\".we_exist\");\nconst wordsSets = [\n  \"Raise the potential of the human race\",\n  \"Inspire life without limits\",\n  \"Build the future\",\n  \"Disrespect the impossible\",\n  \"Playing infinite games\",\n  \"Technology\",\n  \"Delivering on hope\",\n  \"Ourselves\",\n];\n\nconst headerText = [\"We exist to\", \"We believe in\"];\nlet caretVisible = true;\nlet currentCharIndex = 0;\nlet currentHeaderChar = 0;\n\nlet interval;\n\nasync function displayLine(lineIndex) {\n  const sentence = wordsSets[lineIndex];\n  const currentHeaderWord = headerText[lineIndex < 4 ? 0 : 1];\n\n  const wordWithCaret =\n    sentence.substring(0, currentCharIndex + 1) +\n    (caretVisible ? \"<span>|</span>\" : \"\");\n  wordContainer.innerHTML = `<div>${wordWithCaret}</div>`;\n\n  const currentHeaderText = currentHeaderWord.substring(0, currentHeaderChar);\n  header.textContent = currentHeaderText;\n\n  currentCharIndex = Math.min(currentCharIndex + 1, sentence.length);\n  currentHeaderChar = Math.min(currentHeaderChar + 1, currentHeaderWord.length);\n\n  console.log(currentCharIndex, sentence.length);\n  console.log(currentHeaderChar, currentHeaderWord.length);\n\n  /**\n   * if the header text and the current word text is done,\n   * clear the interval, reset the indices then wait for two seconds\n   * before you move on to the next line\n   */\n  if (\n    currentCharIndex == sentence.length &&\n    currentHeaderChar == currentHeaderWord.length\n  ) {\n    clearInterval(interval);\n    currentCharIndex = 0;\n    currentHeaderChar = 0;\n\n    await sleep(2000);\n    interval = setInterval(() => {\n      let nextLineIndex = lineIndex + 1;\n      if (nextLineIndex == wordsSets.length) {\n        nextLineIndex = 0;\n      }\n      displayLine(nextLineIndex);\n    }, 150);\n  }\n}\n\nfunction initalizeTypewriterEffect() {\n  interval = setInterval(() => {\n    displayLine(0);\n  }, 150);\n}\n\ninitalizeTypewriterEffect();\n\nfunction sleep(ms) {\n  console.log(\"Sleeping for \" + ms);\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"names":[],"version":3,"file":"index.3935c928.js.map","sourceRoot":"/__parcel_source_root/"}