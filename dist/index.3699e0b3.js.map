{"mappings":"ICmBI,EAnBJ,MAAM,EAAgB,SAAS,cAAc,CAAC,iBAChC,SAAS,cAAc,CAAC,SACtC,MAAM,EAAS,SAAS,aAAa,CAAC,aAChC,EAAY,CAChB,wCACA,8BACA,mBACA,4BACA,yBACA,aACA,qBACA,YACD,CAEK,EAAa,CAAC,cAAe,gBAAgB,CAEnD,IAAI,EAAmB,EACnB,EAAoB,EAIxB,eAAe,EAAY,CAAS,EAClC,IAAM,EAAW,CAAS,CAAC,EAAU,CAC/B,EAAoB,CAAU,CAAC,EAAY,EAAI,EAAI,EAAE,CAErD,EACJ,EAAS,SAAS,CAAC,EAAG,EAAmB,GACzB,gBAClB,CAAA,EAAc,SAAS,CAAG,CAAC,KAAK,EAAE,EAAc,MAAM,CAAC,CAEvD,IAAM,EAAoB,EAAkB,SAAS,CAAC,EAAG,EACzD,CAAA,EAAO,WAAW,CAAG,EAErB,EAAmB,KAAK,GAAG,CAAC,EAAmB,EAAG,EAAS,MAAM,EACjE,EAAoB,KAAK,GAAG,CAAC,EAAoB,EAAG,EAAkB,MAAM,EAE5E,QAAQ,GAAG,CAAC,EAAkB,EAAS,MAAM,EAC7C,QAAQ,GAAG,CAAC,EAAmB,EAAkB,MAAM,EAQrD,GAAoB,EAAS,MAAM,EACnC,GAAqB,EAAkB,MAAM,GAE7C,cAAc,GACd,EAAmB,EACnB,EAAoB,EAEpB,OAoBF,QAAQ,GAAG,CAAC,qBACL,IAAI,QAAQ,AAAC,GAAY,WAAW,EArB7B,OACZ,EAAW,YAAY,KACrB,IAAI,EAAgB,EAAY,EAC5B,GAAiB,EAAU,MAAM,EACnC,CAAA,EAAgB,CAAA,EAElB,EAAY,EACd,EAAG,KAEP,CAGE,EAAW,YAAY,KACrB,EAAY,EACd,EAAG","sources":["<anon>","assets/index.js"],"sourcesContent":["const wordContainer = document.getElementById(\"wordContainer\");\nconst caret = document.getElementById(\"caret\");\nconst header = document.querySelector(\".we_exist\");\nconst wordsSets = [\n    \"Raise the potential of the human race\",\n    \"Inspire life without limits\",\n    \"Build the future\",\n    \"Disrespect the impossible\",\n    \"Playing infinite games\",\n    \"Technology\",\n    \"Delivering on hope\",\n    \"Ourselves\"\n];\nconst headerText = [\n    \"We exist to\",\n    \"We believe in\"\n];\nlet caretVisible = true;\nlet currentCharIndex = 0;\nlet currentHeaderChar = 0;\nlet interval;\nasync function displayLine(lineIndex) {\n    const sentence = wordsSets[lineIndex];\n    const currentHeaderWord = headerText[lineIndex < 4 ? 0 : 1];\n    const wordWithCaret = sentence.substring(0, currentCharIndex + 1) + (caretVisible ? \"<span>|</span>\" : \"\");\n    wordContainer.innerHTML = `<div>${wordWithCaret}</div>`;\n    const currentHeaderText = currentHeaderWord.substring(0, currentHeaderChar);\n    header.textContent = currentHeaderText;\n    currentCharIndex = Math.min(currentCharIndex + 1, sentence.length);\n    currentHeaderChar = Math.min(currentHeaderChar + 1, currentHeaderWord.length);\n    console.log(currentCharIndex, sentence.length);\n    console.log(currentHeaderChar, currentHeaderWord.length);\n    /**\n   * if the header text and the current word text is done,\n   * clear the interval, reset the indices then wait for two seconds\n   * before you move on to the next line\n   */ if (currentCharIndex == sentence.length && currentHeaderChar == currentHeaderWord.length) {\n        clearInterval(interval);\n        currentCharIndex = 0;\n        currentHeaderChar = 0;\n        await sleep(2000);\n        interval = setInterval(()=>{\n            let nextLineIndex = lineIndex + 1;\n            if (nextLineIndex == wordsSets.length) nextLineIndex = 0;\n            displayLine(nextLineIndex);\n        }, 150);\n    }\n}\nfunction initalizeTypewriterEffect() {\n    interval = setInterval(()=>{\n        displayLine(0);\n    }, 150);\n}\ninitalizeTypewriterEffect();\nfunction sleep(ms) {\n    console.log(\"Sleeping for \" + ms);\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\n//# sourceMappingURL=index.3699e0b3.js.map\n","const wordContainer = document.getElementById(\"wordContainer\");\nconst caret = document.getElementById(\"caret\");\nconst header = document.querySelector(\".we_exist\");\nconst wordsSets = [\n  \"Raise the potential of the human race\",\n  \"Inspire life without limits\",\n  \"Build the future\",\n  \"Disrespect the impossible\",\n  \"Playing infinite games\",\n  \"Technology\",\n  \"Delivering on hope\",\n  \"Ourselves\",\n];\n\nconst headerText = [\"We exist to\", \"We believe in\"];\nlet caretVisible = true;\nlet currentCharIndex = 0;\nlet currentHeaderChar = 0;\n\nlet interval;\n\nasync function displayLine(lineIndex) {\n  const sentence = wordsSets[lineIndex];\n  const currentHeaderWord = headerText[lineIndex < 4 ? 0 : 1];\n\n  const wordWithCaret =\n    sentence.substring(0, currentCharIndex + 1) +\n    (caretVisible ? \"<span>|</span>\" : \"\");\n  wordContainer.innerHTML = `<div>${wordWithCaret}</div>`;\n\n  const currentHeaderText = currentHeaderWord.substring(0, currentHeaderChar);\n  header.textContent = currentHeaderText;\n\n  currentCharIndex = Math.min(currentCharIndex + 1, sentence.length);\n  currentHeaderChar = Math.min(currentHeaderChar + 1, currentHeaderWord.length);\n\n  console.log(currentCharIndex, sentence.length);\n  console.log(currentHeaderChar, currentHeaderWord.length);\n\n  /**\n   * if the header text and the current word text is done,\n   * clear the interval, reset the indices then wait for two seconds\n   * before you move on to the next line\n   */\n  if (\n    currentCharIndex == sentence.length &&\n    currentHeaderChar == currentHeaderWord.length\n  ) {\n    clearInterval(interval);\n    currentCharIndex = 0;\n    currentHeaderChar = 0;\n\n    await sleep(2000);\n    interval = setInterval(() => {\n      let nextLineIndex = lineIndex + 1;\n      if (nextLineIndex == wordsSets.length) {\n        nextLineIndex = 0;\n      }\n      displayLine(nextLineIndex);\n    }, 150);\n  }\n}\n\nfunction initalizeTypewriterEffect() {\n  interval = setInterval(() => {\n    displayLine(0);\n  }, 150);\n}\n\ninitalizeTypewriterEffect();\n\nfunction sleep(ms) {\n  console.log(\"Sleeping for \" + ms);\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n"],"names":["interval","wordContainer","document","getElementById","header","querySelector","wordsSets","headerText","currentCharIndex","currentHeaderChar","displayLine","lineIndex","sentence","currentHeaderWord","wordWithCaret","substring","innerHTML","currentHeaderText","textContent","Math","min","length","console","log","clearInterval","Promise","resolve","setTimeout","setInterval","nextLineIndex"],"version":3,"file":"index.3699e0b3.js.map"}